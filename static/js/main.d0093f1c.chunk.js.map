{"version":3,"sources":["App.js","index.js"],"names":["App","useState","searchName","setSearchName","weatherLocation","setWeatherLocation","weatherCurrent","setWeatherCurrent","weatherCurrentCond","setWeatherCurrentCond","isValid","setIsValid","isNull","setIsNull","searchInput","useRef","getWeatherData","a","fetch","then","res","ok","json","swal","data","location","current","condition","useEffect","search","value","trim","length","window","addEventListener","e","keyCode","className","type","placeholder","ref","href","onClick","name","region","localtime","temp_c","text","src","icon","alt","ReactDOM","render","Fragment","document","getElementById"],"mappings":"6QA6GeA,MAzGf,WACE,MAAoCC,mBAAS,aAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA8CF,mBAAS,IAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAA4CJ,mBAAS,IAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAAoDN,mBAAS,IAA7D,mBAAOO,EAAP,KAA2BC,EAA3B,KACA,EAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAA4BV,oBAAS,GAArC,mBAAOW,EAAP,KAAeC,EAAf,KAEMC,EAAcC,mBAEdC,EAAc,uCAAG,WAAOd,GAAP,SAAAe,EAAA,sDACrBC,MAAM,mFAAD,OACgFhB,EADhF,YAIFiB,MAAK,SAACC,GACL,GAAIA,EAAIC,GAEN,OADAR,GAAU,GACHO,EAAIE,OAEXT,GAAU,GACVU,IAAK,SAAU,wBAAyB,YAG3CJ,MAAK,SAACK,GACDA,IACFnB,EAAmBmB,EAAKC,UACxBlB,EAAkBiB,EAAKE,SACvBjB,EAAsBe,EAAKE,QAAQC,eAlBpB,2CAAH,sDAuBpBC,qBAAU,WACRZ,EAAed,KACd,CAACA,IAEJ,IAAM2B,EAAS,WACTf,EAAYY,QAAQI,MAAMC,OAAOC,OAAS,GAC5CrB,GAAW,GACXR,EAAcW,EAAYY,QAAQI,SAElCnB,GAAW,GACXY,IAAK,SAAU,wBAAyB,WAU5C,OANAU,OAAOC,iBAAiB,WAAW,SAACC,GAChB,KAAdA,EAAEC,SACJP,OAKF,qCACE,oBAAIQ,UAAU,cAAd,+BACA,0BAASA,UAAU,kBAAnB,UACE,uBACEC,KAAK,OACLC,YAAY,6BACZC,IAAK1B,EACLuB,UAAS,iBAAY3B,GAAW,WAElC,sBAAM2B,UAAU,OAAhB,SACE,mBAAGI,KAAK,8FAAR,4CAIF,wBAAQC,QAASb,EAAQQ,UAAU,YAAnC,uBAKF,qBAAKA,UAAU,UAAf,SACIzB,EAwBA,oBAAIyB,UAAU,UAAd,4BAvBA,qCACE,oCACE,+BACE,sBAAMA,UAAU,QAAhB,SAAyBjC,EAAgBuC,OACzC,sBAAMN,UAAU,SAAhB,SAA0BjC,EAAgBwC,YAE5C,4BAAIxC,EAAgByC,YACpB,gCACE,oBAAGR,UAAU,OAAb,UAAqB/B,EAAewC,OAApC,UACA,mBAAGT,UAAU,YAAb,SAA0B7B,EAAmBuC,OAC7C,qBACEC,IAAKxC,EAAmByC,KACxBC,IAAI,iCAIV,qC,MC1FZC,IAASC,OACP,cAAC,IAAMC,SAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d0093f1c.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport swal from \"sweetalert\";\n\nfunction App() {\n  const [searchName, setSearchName] = useState(\"Hyderabad\");\n  const [weatherLocation, setWeatherLocation] = useState(\"\");\n  const [weatherCurrent, setWeatherCurrent] = useState(\"\");\n  const [weatherCurrentCond, setWeatherCurrentCond] = useState(\"\");\n  const [isValid, setIsValid] = useState(true);\n  const [isNull, setIsNull] = useState(false);\n\n  const searchInput = useRef();\n\n  const getWeatherData = async (searchName) => {\n    fetch(\n      `https://api.weatherapi.com/v1/current.json?key=caab7ff0f39141e6a8731620212206&q=${searchName}&aqi=no`\n      // \"http://api.weatherapi.com/v1/current.json?key=caab7ff0f39141e6a8731620212206&q=Hyderabad\"\n    )\n      .then((res) => {\n        if (res.ok) {\n          setIsNull(false);\n          return res.json();\n        } else {\n          setIsNull(true);\n          swal(\"Error!\", \"Enter valid City Name\", \"error\");\n        }\n      })\n      .then((data) => {\n        if (data) {\n          setWeatherLocation(data.location);\n          setWeatherCurrent(data.current);\n          setWeatherCurrentCond(data.current.condition);\n        }\n      });\n  };\n\n  useEffect(() => {\n    getWeatherData(searchName);\n  }, [searchName]);\n\n  const search = () => {\n    if (searchInput.current.value.trim().length > 4) {\n      setIsValid(true);\n      setSearchName(searchInput.current.value);\n    } else {\n      setIsValid(false);\n      swal(\"Error!\", \"Enter valid City Name\", \"error\");\n    }\n  };\n\n  window.addEventListener(\"keydown\", (e) => {\n    if (e.keyCode === 13) {\n      search();\n    }\n  });\n\n  return (\n    <>\n      <h1 className=\"main_header\">Weather condition</h1>\n      <section className=\"input_container\">\n        <input\n          type=\"text\"\n          placeholder=\"City Name,country code....\"\n          ref={searchInput}\n          className={`input ${!isValid && \"empty\"}`}\n        />\n        <span className=\"link\">\n          <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes#Current_ISO_3166_country_codes\">\n            Check Your Country Code here\n          </a>\n        </span>\n        <button onClick={search} className=\"input-btn\">\n          Search\n        </button>\n      </section>\n\n      <div className=\"display\">\n        {!isNull ? (\n          <>\n            <section>\n              <h1>\n                <span className=\"place\">{weatherLocation.name}</span>\n                <span className=\"region\">{weatherLocation.region}</span>\n              </h1>\n              <p>{weatherLocation.localtime}</p>\n              <div>\n                <p className=\"temp\">{weatherCurrent.temp_c}Â°</p>\n                <p className=\"condition\">{weatherCurrentCond.text}</p>\n                <img\n                  src={weatherCurrentCond.icon}\n                  alt=\"weather condition icon\"\n                />\n              </div>\n            </section>\n            <section>\n              {/* <button className=\"refresh\">\n                Refresh\n              </button> */}\n            </section>\n          </>\n        ) : (\n          <h1 className=\"no_data\">No Data Found!</h1>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\nif (module.hot) {\n  module.hot.accept();\n}\n"],"sourceRoot":""}